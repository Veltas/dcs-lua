#!/usr/bin/env lua

local installDir = "/var/tmp/dcs-get"
local baseUrl = "http://backus.uwcs.co.uk/dcs-get"

local helpMessage = [[
dcs-get - Warwick CompSoc unprivileged package manager

Usage:
	dcs-get {install|reinstall} package_name ...
	dcs-get {list|list-installed}
	dcs-get search "search_string" ...
	dcs-get clean
	dcs-get {gensymlinks|package|upload} package_directory_name
	dcs-get update
	dcs-get {help|--help|-h|longhelp}
]]

local extendedMessage = [[
Mode names can be shortened to the following:
	i: install, r: reinstall, s: search, l:list, li: list-installed,
	c: clean, g: gensymlinks, p: package, u: upload

Modes:
	install
		Installs given packages if not already installed, and
		their dependencies
	reinstall
		Clears installation folders and reinstalls packages,
		and dependencies
	list
		Lists info for all packages
	list-installed
		Lists installed package names
	search
		Lists info for packages with names matching
		all given search strings

Advanced modes:
	update - Re-downloads packages.json
	uninstall - Deletes all the files associated with a package
	clean - Removes all your dcs-get installation files and packages
	gensymlinks - Mirrors relevant files from
	              ]] .. installDir .. [[/package_directory_name
	              in bin, lib, etc.
	package - Creates .tar.gz from package_directory_name and its
	          symlinks in ]] .. installDir .. [[/downloaded
	upload - Uploads package_directory_name.tar.gz from downloaded
	         directory to the server

For support with this executable please raise an issue at
https://github.com/Veltas/dcs-lua/issues

]] .. baseUrl .. [[

]]

xpcall(function ()

	package.path = package.path .. ";" .. installDir .. "/dcslib/?.lua"
	package.path = package.path .. ";" .. installDir .. "/dcslib/?/init.lua"

	local PackageManager = require "dcsget.PackageManager"

	local function caseInsensitiveCompare(str1, str2)
		return str1:lower() < str2:lower()
	end

	local packageManager = PackageManager.new(installDir, baseUrl)

	local mode = arg[1]
	table.remove(arg, 1)
	local parameters = arg

	-- Swap short mode strings out
	local shortModeMap = {
		i = "install",
		s = "search",
		r = "reinstall",
		g = "gensymlinks",
		p = "package",
		u = "upload",
		l = "list",
		li = "list-installed",
		c = "clean"
	}
	mode = shortModeMap[mode] or mode

	-- Installs/reinstalls a list of packages
	if mode == "install" or mode == "reinstall" then

		-- Try to install each given package
		for _, package in ipairs(parameters) do
			if not packageManager:isPackage(package) then
				error("Package " .. package .. " not recognised")
			end
			packageManager:request(mode, package, packageManager:versions(package)())
		end

	-- Simply lists all the currently installed packages
	elseif mode == "list-installed" then

		-- List nicely formatted names of installed packages
		local installedNames = {}
		for entryName, entryVersion in packageManager:installed() do
			local outString = entryName .. "-" .. entryVersion
			if packageManager:isRequested(entryName, entryVersion) then
				outString = outString .. " (manual)"
			end
			table.insert(installedNames, outString)
		end
		table.sort(installedNames, caseInsensitiveCompare)

		for _, name in ipairs(installedNames) do
			print(name)
		end

	-- Lists all packages
	elseif mode == "list" then

		-- Get and sort all package names
		local allPackages = {}
		for package in packageManager:names() do
			table.insert(allPackages, package)
		end
		table.sort(allPackages, caseInsensitiveCompare)

		-- Print full descriptions of all packages
		for _, package in ipairs(allPackages) do
			print(packageManager:longDescription(package))
		end

	-- Lets you search for a pattern in the package names
	elseif mode == "search" then

		if #parameters == 0 then
			error("Expected more parameters to use as search strings")
		end

		-- Get list of packages that match all search strings
		local results = packageManager:listMatched(parameters)

		-- Sort and print results
		table.sort(results, caseInsensitiveCompare)
		for _, result in ipairs(results) do
			print(packageManager:longDescription(result))
		end

	elseif mode == "uninstall" then

		error("Not implemented")

	elseif mode == "gensymlinks" then

		-- Takes ONE versioned package
		if #parameters ~= 1 then
			error("Expected one extra argument for gensymlinks")
		end
		local versionedPackage = parameters[1]

		packageManager:generateSymlinks(versionedPackage)

	elseif mode == "package" or mode == "upload" then

		error("Not implemented")

	elseif mode == "update" then

		packageManager:update()

	elseif mode == "clean" then

		packageManager:clean()

	-- Display help message
	elseif mode == "help" or mode == "--help" or mode == "-h" then

		print(helpMessage)
		print("Use dcs-get longhelp for more details\n")

	elseif mode == "longhelp" then

		print(helpMessage)
		print(extendedMessage)

	else

		error("Unrecognised mode, try --help / help")

	end

end,

function (mainErrorMessage)
	-- If we catch an exception, write error and exit with failure status
	io.stderr:write(mainErrorMessage:gsub("^.*/(.-:.-: )", "%1", 1) .. "\n")
	os.exit(false)
end)
